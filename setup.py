#!/usr/bin/env python3
"""
Setup script for DetendezBot
Helps users configure the bot for first-time use
"""

import os
import sys

def create_env_file():
    """Create .env file with user input"""
    print("üîß Setting up environment configuration...")
    print()
    
    # Get Discord token
    print("üìã Discord Bot Setup:")
    print("1. Go to https://discord.com/developers/applications")
    print("2. Create a new application or select existing one")
    print("3. Go to 'Bot' section and copy the token")
    print()
    
    token = input("Enter your Discord bot token: ").strip()
    if not token:
        print("‚ùå Bot token is required!")
        return False
    
    # Get optional Gemini API key
    print()
    print("ü§ñ AI Features Setup (Optional):")
    print("For AI-generated facts and questions:")
    print("1. Go to https://makersuite.google.com/app/apikey")
    print("2. Create a new API key")
    print("3. Enter it below (or press Enter to skip)")
    print()
    
    gemini_key = input("Enter your Gemini API key (optional): ").strip()
    
    # Create .env file
    env_content = f"""# Discord Bot Configuration
DISCORD_TOKEN={token}

# Optional: Google Gemini AI API Key for facts and questions features
# Get your API key from: https://makersuite.google.com/app/apikey
{f'GEMINI_API_KEY={gemini_key}' if gemini_key else '# GEMINI_API_KEY=your_gemini_api_key_here'}

# Logging Configuration (optional)
# Options: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=INFO
"""
    
    try:
        with open('.env', 'w') as f:
            f.write(env_content)
        print("‚úÖ .env file created successfully!")
        return True
    except Exception as e:
        print(f"‚ùå Error creating .env file: {e}")
        return False

def install_dependencies():
    """Install required dependencies"""
    print("üì¶ Installing dependencies...")
    
    try:
        import subprocess
        result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', 'requirements.txt'], 
                              capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Dependencies installed successfully!")
            return True
        else:
            print(f"‚ùå Error installing dependencies: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error installing dependencies: {e}")
        return False

def show_next_steps():
    """Show next steps for the user"""
    print("\nüéâ Setup complete!")
    print("=" * 40)
    print()
    print("üìã Next steps:")
    print("1. Invite your bot to a Discord server:")
    print("   ‚Ä¢ Go to Discord Developer Portal")
    print("   ‚Ä¢ OAuth2 ‚Üí URL Generator")
    print("   ‚Ä¢ Select 'bot' and 'applications.commands'")
    print("   ‚Ä¢ Select required permissions (see README)")
    print("   ‚Ä¢ Use generated URL to invite bot")
    print()
    print("2. Start the bot:")
    print("   python main.py")
    print("   or")
    print("   python run.py")
    print()
    print("3. Configure the bot in your server:")
    print("   Use /help to see all available commands")
    print("   Use admin commands to configure features")
    print()
    print("üìñ For detailed instructions, see README.md")

def main():
    """Main setup function"""
    print("ü§ñ DetendezBot Setup Wizard")
    print("=" * 30)
    print()
    
    # Check if .env already exists
    if os.path.exists('.env'):
        print("‚ö†Ô∏è  .env file already exists!")
        response = input("Do you want to recreate it? (y/N): ").strip().lower()
        if response not in ['y', 'yes']:
            print("Setup cancelled.")
            return
    
    # Check if requirements.txt exists
    if not os.path.exists('requirements.txt'):
        print("‚ùå requirements.txt not found!")
        print("Make sure you're in the correct directory.")
        return
    
    # Install dependencies
    response = input("Install dependencies from requirements.txt? (Y/n): ").strip().lower()
    if response not in ['n', 'no']:
        if not install_dependencies():
            print("‚ùå Setup failed during dependency installation.")
            return
    
    print()
    
    # Create environment file
    if not create_env_file():
        print("‚ùå Setup failed during environment configuration.")
        return
    
    print()
    show_next_steps()

if __name__ == "__main__":
    main() 