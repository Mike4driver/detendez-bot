import os
import json
import asyncio
import logging
import time
import requests
from typing import Optional

# Try to import selenium, but make it optional
try:
    from selenium import webdriver
    from selenium.webdriver.chrome.service import Service
    from selenium.webdriver.chrome.options import Options
    from selenium.webdriver.common.by import By
    from selenium.webdriver.support.ui import WebDriverWait
    from selenium.webdriver.support import expected_conditions as EC
    from webdriver_manager.chrome import ChromeDriverManager
    SELENIUM_AVAILABLE = True
except ImportError:
    SELENIUM_AVAILABLE = False

logger = logging.getLogger(__name__)

class YouTubeCookieExtractor:
    """Extract YouTube cookies using multiple methods for yt-dlp"""
    
    def __init__(self):
        self.cookies_file = "youtube_cookies.txt"
        self.cookies_cache_duration = 3600  # 1 hour
        
    def _setup_driver(self):
        """Setup Chrome WebDriver with appropriate options"""
        if not SELENIUM_AVAILABLE:
            raise Exception("Selenium not available")
            
        chrome_options = Options()
        chrome_options.add_argument("--headless")  # Run in background
        chrome_options.add_argument("--no-sandbox")
        chrome_options.add_argument("--disable-dev-shm-usage")
        chrome_options.add_argument("--disable-blink-features=AutomationControlled")
        chrome_options.add_argument("--disable-gpu")
        chrome_options.add_argument("--disable-extensions")
        chrome_options.add_argument("--disable-plugins")
        chrome_options.add_argument("--disable-images")
        chrome_options.add_experimental_option("excludeSwitches", ["enable-automation"])
        chrome_options.add_experimental_option('useAutomationExtension', False)
        
        # User agent to appear more like a real browser
        chrome_options.add_argument("--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36")
        
        try:
            service = Service(ChromeDriverManager().install())
            driver = webdriver.Chrome(service=service, options=chrome_options)
            
            # Execute script to hide automation indicators
            driver.execute_script("Object.defineProperty(navigator, 'webdriver', {get: () => undefined})")
            
            return driver
        except Exception as e:
            logger.error(f"Failed to setup Chrome driver: {e}")
            raise
    
    def _cookies_are_fresh(self):
        """Check if cached cookies are still fresh"""
        if not os.path.exists(self.cookies_file):
            return False
        
        file_age = time.time() - os.path.getmtime(self.cookies_file)
        return file_age < self.cookies_cache_duration
    
    def _selenium_cookies_to_netscape(self, selenium_cookies):
        """Convert Selenium cookies to Netscape format for yt-dlp"""
        netscape_cookies = []
        
        for cookie in selenium_cookies:
            # Netscape format: domain, domain_specified, path, secure, expires, name, value
            domain = cookie.get('domain', '')
            domain_specified = 'TRUE' if domain.startswith('.') else 'FALSE'
            path = cookie.get('path', '/')
            secure = 'TRUE' if cookie.get('secure', False) else 'FALSE'
            expires = str(int(cookie.get('expiry', 0))) if cookie.get('expiry') else '0'
            name = cookie.get('name', '')
            value = cookie.get('value', '')
            
            netscape_line = f"{domain}\t{domain_specified}\t{path}\t{secure}\t{expires}\t{name}\t{value}"
            netscape_cookies.append(netscape_line)
        
        return netscape_cookies
    
    def _create_basic_cookies(self):
        """Create basic YouTube cookies without browser automation"""
        basic_cookies = [
            "# Netscape HTTP Cookie File",
            "# This file was generated by DetendezBot (basic mode)",
            "# Some YouTube videos may still be restricted",
            ".youtube.com\tTRUE\t/\tFALSE\t0\tCONSENT\tYES+",
            ".youtube.com\tTRUE\t/\tFALSE\t0\tVISITOR_INFO1_LIVE\t",
            ".youtube.com\tTRUE\t/\tTRUE\t0\tYSC\t",
        ]
        return basic_cookies
    
    async def extract_cookies(self, force_refresh=False):
        """Extract YouTube cookies using available methods"""
        
        # Check if we have fresh cookies
        if not force_refresh and self._cookies_are_fresh():
            logger.info("Using cached YouTube cookies")
            return self.cookies_file
        
        logger.info("Extracting fresh YouTube cookies...")
        
        # Try selenium method first
        if SELENIUM_AVAILABLE:
            try:
                cookies_content = await self._extract_cookies_selenium()
                if cookies_content:
                    # Write cookies to file
                    with open(self.cookies_file, 'w', encoding='utf-8') as f:
                        f.write("# Netscape HTTP Cookie File\n")
                        f.write("# This file was generated by DetendezBot (selenium mode)\n")
                        f.write("\n".join(cookies_content))
                    
                    logger.info("YouTube cookies extracted successfully using selenium")
                    return self.cookies_file
            except Exception as e:
                logger.warning(f"Selenium method failed: {e}")
        
        # Fallback to basic cookies
        logger.info("Using basic cookie fallback method")
        try:
            basic_cookies = self._create_basic_cookies()
            
            with open(self.cookies_file, 'w', encoding='utf-8') as f:
                f.write("\n".join(basic_cookies))
            
            logger.info("Basic YouTube cookies created")
            return self.cookies_file
            
        except Exception as e:
            logger.error(f"Failed to create basic cookies: {e}")
            
            # Try to use existing cookies if they exist
            if os.path.exists(self.cookies_file):
                logger.warning("Using existing cookies despite extraction failure")
                return self.cookies_file
            
            return None
    
    async def _extract_cookies_selenium(self):
        """Extract cookies using selenium (runs in executor)"""
        loop = asyncio.get_event_loop()
        return await loop.run_in_executor(None, self._extract_cookies_sync)
    
    def _extract_cookies_sync(self):
        """Synchronous cookie extraction (runs in executor)"""
        driver = None
        try:
            driver = self._setup_driver()
            
            # Navigate to YouTube
            logger.info("Navigating to YouTube...")
            driver.get("https://www.youtube.com")
            
            # Wait for page to load
            WebDriverWait(driver, 10).until(
                EC.presence_of_element_located((By.TAG_NAME, "body"))
            )
            
            # Handle consent dialog if present
            try:
                consent_button = WebDriverWait(driver, 5).until(
                    EC.element_to_be_clickable((By.XPATH, "//button[contains(text(), 'Accept') or contains(text(), 'I agree') or contains(text(), 'Agree')]"))
                )
                consent_button.click()
                logger.info("Clicked consent button")
                time.sleep(2)
            except:
                logger.info("No consent dialog found or couldn't click it")
            
            # Wait a bit for any additional loading
            time.sleep(3)
            
            # Try to search for a video to trigger more cookies
            try:
                search_box = driver.find_element(By.NAME, "search_query")
                search_box.send_keys("music")
                search_box.submit()
                time.sleep(2)
                logger.info("Performed test search")
            except:
                logger.info("Couldn't perform test search")
            
            # Get all cookies
            selenium_cookies = driver.get_cookies()
            logger.info(f"Extracted {len(selenium_cookies)} cookies from YouTube")
            
            # Convert to Netscape format
            netscape_cookies = self._selenium_cookies_to_netscape(selenium_cookies)
            
            return netscape_cookies
            
        finally:
            if driver:
                try:
                    driver.quit()
                except:
                    pass
    
    def get_cookies_file(self):
        """Get the path to the cookies file"""
        if os.path.exists(self.cookies_file):
            return self.cookies_file
        return None
    
    async def cleanup_old_cookies(self):
        """Clean up old cookie files"""
        try:
            if os.path.exists(self.cookies_file):
                file_age = time.time() - os.path.getmtime(self.cookies_file)
                if file_age > 86400:  # 24 hours
                    os.remove(self.cookies_file)
                    logger.info("Cleaned up old cookie file")
        except Exception as e:
            logger.error(f"Error cleaning up cookies: {e}")
    
    async def test_environment(self):
        """Test if the environment supports cookie extraction"""
        result = {
            'selenium_available': SELENIUM_AVAILABLE,
            'chrome_available': False,
            'extraction_method': 'none'
        }
        
        if SELENIUM_AVAILABLE:
            try:
                # Try to create a driver to test Chrome availability
                driver = self._setup_driver()
                driver.quit()
                result['chrome_available'] = True
                result['extraction_method'] = 'selenium'
            except Exception as e:
                logger.warning(f"Chrome not available: {e}")
                result['extraction_method'] = 'basic'
        else:
            result['extraction_method'] = 'basic'
        
        return result

# Global instance
youtube_cookie_extractor = YouTubeCookieExtractor() 